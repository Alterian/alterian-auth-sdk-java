/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiCallback;
import com.alterian.auth.ApiClient;
import com.alterian.auth.ApiException;
import com.alterian.auth.ApiResponse;
import com.alterian.auth.Configuration;
import com.alterian.auth.Pair;
import com.alterian.auth.ProgressRequestBody;
import com.alterian.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.auth.model.AddCertificateDefaultResponse;
import com.alterian.auth.model.AddSettingRequest;
import com.alterian.auth.model.DeleteSettingRequest;
import com.alterian.auth.model.GetSettingDefaultResponse;
import com.alterian.auth.model.GetSettingRequest;
import com.alterian.auth.model.GetSettingsDefaultResponse;
import com.alterian.auth.model.GetSettingsRequest;
import com.alterian.auth.model.GetSettingsValuesRequest;
import com.alterian.auth.model.LogoutDefaultResponse;
import com.alterian.auth.model.SetEMServiceURLRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSetting
     * @param addSettingRequest Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSettingCall(AddSettingRequest addSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSettingRequest;

        // create path and map variables
        String localVarPath = "/AddSetting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSettingValidateBeforeCall(AddSettingRequest addSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addSettingRequest' is set
        if (addSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'addSettingRequest' when calling addSetting(Async)");
        }

        return addSettingCall(addSettingRequest, _callback);

    }

    /**
     * Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
     * Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
     * @param addSettingRequest Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. (required)
     * @return AddCertificateDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddCertificateDefaultResponse addSetting(AddSettingRequest addSettingRequest) throws ApiException {
        ApiResponse<AddCertificateDefaultResponse> localVarResp = addSettingWithHttpInfo(addSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
     * Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
     * @param addSettingRequest Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. (required)
     * @return ApiResponse&lt;AddCertificateDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddCertificateDefaultResponse> addSettingWithHttpInfo(AddSettingRequest addSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = addSettingValidateBeforeCall(addSettingRequest, null);
        Type localVarReturnType = new TypeToken<AddCertificateDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. (asynchronously)
     * Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication.
     * @param addSettingRequest Adds in a setting which can then be mapped to an issuer for the purposes of claims authentication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSettingAsync(AddSettingRequest addSettingRequest, final ApiCallback<AddCertificateDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSettingValidateBeforeCall(addSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<AddCertificateDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSetting
     * @param deleteSettingRequest Deletes a setting (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSettingCall(DeleteSettingRequest deleteSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSettingRequest;

        // create path and map variables
        String localVarPath = "/DeleteSetting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSettingValidateBeforeCall(DeleteSettingRequest deleteSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteSettingRequest' is set
        if (deleteSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSettingRequest' when calling deleteSetting(Async)");
        }

        return deleteSettingCall(deleteSettingRequest, _callback);

    }

    /**
     * Deletes a setting
     * Deletes a setting
     * @param deleteSettingRequest Deletes a setting (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse deleteSetting(DeleteSettingRequest deleteSettingRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = deleteSettingWithHttpInfo(deleteSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a setting
     * Deletes a setting
     * @param deleteSettingRequest Deletes a setting (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> deleteSettingWithHttpInfo(DeleteSettingRequest deleteSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteSettingValidateBeforeCall(deleteSettingRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a setting (asynchronously)
     * Deletes a setting
     * @param deleteSettingRequest Deletes a setting (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSettingAsync(DeleteSettingRequest deleteSettingRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSettingValidateBeforeCall(deleteSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSetting
     * @param getSettingRequest Read a setting (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingCall(GetSettingRequest getSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSettingRequest;

        // create path and map variables
        String localVarPath = "/GetSetting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingValidateBeforeCall(GetSettingRequest getSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSettingRequest' is set
        if (getSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'getSettingRequest' when calling getSetting(Async)");
        }

        return getSettingCall(getSettingRequest, _callback);

    }

    /**
     * Read a setting
     * Read a setting
     * @param getSettingRequest Read a setting (required)
     * @return GetSettingDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingDefaultResponse getSetting(GetSettingRequest getSettingRequest) throws ApiException {
        ApiResponse<GetSettingDefaultResponse> localVarResp = getSettingWithHttpInfo(getSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Read a setting
     * Read a setting
     * @param getSettingRequest Read a setting (required)
     * @return ApiResponse&lt;GetSettingDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettingDefaultResponse> getSettingWithHttpInfo(GetSettingRequest getSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = getSettingValidateBeforeCall(getSettingRequest, null);
        Type localVarReturnType = new TypeToken<GetSettingDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read a setting (asynchronously)
     * Read a setting
     * @param getSettingRequest Read a setting (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingAsync(GetSettingRequest getSettingRequest, final ApiCallback<GetSettingDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingValidateBeforeCall(getSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<GetSettingDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettings
     * @param getSettingsRequest Reads a list of settings (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsCall(GetSettingsRequest getSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSettingsRequest;

        // create path and map variables
        String localVarPath = "/GetSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(GetSettingsRequest getSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSettingsRequest' is set
        if (getSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'getSettingsRequest' when calling getSettings(Async)");
        }

        return getSettingsCall(getSettingsRequest, _callback);

    }

    /**
     * Reads a list of settings
     * Reads a list of settings
     * @param getSettingsRequest Reads a list of settings (required)
     * @return GetSettingsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsDefaultResponse getSettings(GetSettingsRequest getSettingsRequest) throws ApiException {
        ApiResponse<GetSettingsDefaultResponse> localVarResp = getSettingsWithHttpInfo(getSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Reads a list of settings
     * Reads a list of settings
     * @param getSettingsRequest Reads a list of settings (required)
     * @return ApiResponse&lt;GetSettingsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettingsDefaultResponse> getSettingsWithHttpInfo(GetSettingsRequest getSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(getSettingsRequest, null);
        Type localVarReturnType = new TypeToken<GetSettingsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads a list of settings (asynchronously)
     * Reads a list of settings
     * @param getSettingsRequest Reads a list of settings (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsAsync(GetSettingsRequest getSettingsRequest, final ApiCallback<GetSettingsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(getSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetSettingsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettingsValues
     * @param getSettingsValuesRequest Reads settings and their values (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsValuesCall(GetSettingsValuesRequest getSettingsValuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSettingsValuesRequest;

        // create path and map variables
        String localVarPath = "/GetSettingsValues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValuesValidateBeforeCall(GetSettingsValuesRequest getSettingsValuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSettingsValuesRequest' is set
        if (getSettingsValuesRequest == null) {
            throw new ApiException("Missing the required parameter 'getSettingsValuesRequest' when calling getSettingsValues(Async)");
        }

        return getSettingsValuesCall(getSettingsValuesRequest, _callback);

    }

    /**
     * Reads settings and their values
     * Reads settings and their values
     * @param getSettingsValuesRequest Reads settings and their values (required)
     * @return GetSettingsDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsDefaultResponse getSettingsValues(GetSettingsValuesRequest getSettingsValuesRequest) throws ApiException {
        ApiResponse<GetSettingsDefaultResponse> localVarResp = getSettingsValuesWithHttpInfo(getSettingsValuesRequest);
        return localVarResp.getData();
    }

    /**
     * Reads settings and their values
     * Reads settings and their values
     * @param getSettingsValuesRequest Reads settings and their values (required)
     * @return ApiResponse&lt;GetSettingsDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettingsDefaultResponse> getSettingsValuesWithHttpInfo(GetSettingsValuesRequest getSettingsValuesRequest) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValuesValidateBeforeCall(getSettingsValuesRequest, null);
        Type localVarReturnType = new TypeToken<GetSettingsDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads settings and their values (asynchronously)
     * Reads settings and their values
     * @param getSettingsValuesRequest Reads settings and their values (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsValuesAsync(GetSettingsValuesRequest getSettingsValuesRequest, final ApiCallback<GetSettingsDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValuesValidateBeforeCall(getSettingsValuesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetSettingsDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setEMServiceURL
     * @param setEMServiceURLRequest Updates the EM service URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setEMServiceURLCall(SetEMServiceURLRequest setEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setEMServiceURLRequest;

        // create path and map variables
        String localVarPath = "/SetEMServiceURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setEMServiceURLValidateBeforeCall(SetEMServiceURLRequest setEMServiceURLRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setEMServiceURLRequest' is set
        if (setEMServiceURLRequest == null) {
            throw new ApiException("Missing the required parameter 'setEMServiceURLRequest' when calling setEMServiceURL(Async)");
        }

        return setEMServiceURLCall(setEMServiceURLRequest, _callback);

    }

    /**
     * Updates the EM service URL
     * Updates the EM service URL
     * @param setEMServiceURLRequest Updates the EM service URL (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse setEMServiceURL(SetEMServiceURLRequest setEMServiceURLRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = setEMServiceURLWithHttpInfo(setEMServiceURLRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the EM service URL
     * Updates the EM service URL
     * @param setEMServiceURLRequest Updates the EM service URL (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> setEMServiceURLWithHttpInfo(SetEMServiceURLRequest setEMServiceURLRequest) throws ApiException {
        okhttp3.Call localVarCall = setEMServiceURLValidateBeforeCall(setEMServiceURLRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the EM service URL (asynchronously)
     * Updates the EM service URL
     * @param setEMServiceURLRequest Updates the EM service URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setEMServiceURLAsync(SetEMServiceURLRequest setEMServiceURLRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setEMServiceURLValidateBeforeCall(setEMServiceURLRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSetting
     * @param addSettingRequest Updates a setting (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSettingCall(AddSettingRequest addSettingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSettingRequest;

        // create path and map variables
        String localVarPath = "/UpdateSetting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingValidateBeforeCall(AddSettingRequest addSettingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addSettingRequest' is set
        if (addSettingRequest == null) {
            throw new ApiException("Missing the required parameter 'addSettingRequest' when calling updateSetting(Async)");
        }

        return updateSettingCall(addSettingRequest, _callback);

    }

    /**
     * Updates a setting
     * Updates a setting
     * @param addSettingRequest Updates a setting (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse updateSetting(AddSettingRequest addSettingRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = updateSettingWithHttpInfo(addSettingRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a setting
     * Updates a setting
     * @param addSettingRequest Updates a setting (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> updateSettingWithHttpInfo(AddSettingRequest addSettingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSettingValidateBeforeCall(addSettingRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a setting (asynchronously)
     * Updates a setting
     * @param addSettingRequest Updates a setting (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSettingAsync(AddSettingRequest addSettingRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingValidateBeforeCall(addSettingRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
