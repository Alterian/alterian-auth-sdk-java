/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiCallback;
import com.alterian.auth.ApiClient;
import com.alterian.auth.ApiException;
import com.alterian.auth.ApiResponse;
import com.alterian.auth.Configuration;
import com.alterian.auth.Pair;
import com.alterian.auth.ProgressRequestBody;
import com.alterian.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.auth.model.ChangePasswordRequest;
import com.alterian.auth.model.ExpirePasswordRequest;
import com.alterian.auth.model.GetPasswordComplexityRulesDefaultResponse;
import com.alterian.auth.model.LogoutDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PasswordsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PasswordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PasswordsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePassword
     * @param changePasswordRequest Changes a login&#39;s password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/ChangePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(ChangePasswordRequest changePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changePassword(Async)");
        }

        return changePasswordCall(changePasswordRequest, _callback);

    }

    /**
     * Changes a login&#39;s password
     * Changes a login&#39;s password
     * @param changePasswordRequest Changes a login&#39;s password (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse changePassword(ChangePasswordRequest changePasswordRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = changePasswordWithHttpInfo(changePasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Changes a login&#39;s password
     * Changes a login&#39;s password
     * @param changePasswordRequest Changes a login&#39;s password (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> changePasswordWithHttpInfo(ChangePasswordRequest changePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Changes a login&#39;s password (asynchronously)
     * Changes a login&#39;s password
     * @param changePasswordRequest Changes a login&#39;s password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(ChangePasswordRequest changePasswordRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(changePasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expirePassword
     * @param expirePasswordRequest Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirePasswordCall(ExpirePasswordRequest expirePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expirePasswordRequest;

        // create path and map variables
        String localVarPath = "/ExpirePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expirePasswordValidateBeforeCall(ExpirePasswordRequest expirePasswordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expirePasswordRequest' is set
        if (expirePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'expirePasswordRequest' when calling expirePassword(Async)");
        }

        return expirePasswordCall(expirePasswordRequest, _callback);

    }

    /**
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @param expirePasswordRequest Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in. (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse expirePassword(ExpirePasswordRequest expirePasswordRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = expirePasswordWithHttpInfo(expirePasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @param expirePasswordRequest Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in. (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> expirePasswordWithHttpInfo(ExpirePasswordRequest expirePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = expirePasswordValidateBeforeCall(expirePasswordRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in. (asynchronously)
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     * @param expirePasswordRequest Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expirePasswordAsync(ExpirePasswordRequest expirePasswordRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = expirePasswordValidateBeforeCall(expirePasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPasswordComplexityRules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordComplexityRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetPasswordComplexityRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPasswordComplexityRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPasswordComplexityRulesCall(_callback);

    }

    /**
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * @return GetPasswordComplexityRulesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPasswordComplexityRulesDefaultResponse getPasswordComplexityRules() throws ApiException {
        ApiResponse<GetPasswordComplexityRulesDefaultResponse> localVarResp = getPasswordComplexityRulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * @return ApiResponse&lt;GetPasswordComplexityRulesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPasswordComplexityRulesDefaultResponse> getPasswordComplexityRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPasswordComplexityRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetPasswordComplexityRulesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend. (asynchronously)
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordComplexityRulesAsync(final ApiCallback<GetPasswordComplexityRulesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPasswordComplexityRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetPasswordComplexityRulesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
