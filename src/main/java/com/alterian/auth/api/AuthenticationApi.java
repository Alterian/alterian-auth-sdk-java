/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiCallback;
import com.alterian.auth.ApiClient;
import com.alterian.auth.ApiException;
import com.alterian.auth.ApiResponse;
import com.alterian.auth.Configuration;
import com.alterian.auth.Pair;
import com.alterian.auth.ProgressRequestBody;
import com.alterian.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.auth.model.ApplicationLoginDefaultResponse;
import com.alterian.auth.model.ApplicationLoginRequest;
import com.alterian.auth.model.FormsAuthenticationDefaultResponse;
import com.alterian.auth.model.FormsAuthenticationRequest;
import com.alterian.auth.model.GetIdentityUrlDefaultResponse;
import com.alterian.auth.model.GetIdentityUrlRequest;
import com.alterian.auth.model.GetSiteDetailsRequest;
import com.alterian.auth.model.LogoutDefaultResponse;
import com.alterian.auth.model.SAMLAuthenticationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationLogin
     * @param applicationLoginRequest this method requests the auth server give you a token for a particular \&quot;application\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationLoginCall(ApplicationLoginRequest applicationLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationLoginRequest;

        // create path and map variables
        String localVarPath = "/ApplicationLogin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationLoginValidateBeforeCall(ApplicationLoginRequest applicationLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationLoginRequest' is set
        if (applicationLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationLoginRequest' when calling applicationLogin(Async)");
        }

        return applicationLoginCall(applicationLoginRequest, _callback);

    }

    /**
     * this method requests the auth server give you a token for a particular \&quot;application\&quot;
     * this method requests the auth server give you a token for a particular \&quot;application\&quot;
     * @param applicationLoginRequest this method requests the auth server give you a token for a particular \&quot;application\&quot; (required)
     * @return ApplicationLoginDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationLoginDefaultResponse applicationLogin(ApplicationLoginRequest applicationLoginRequest) throws ApiException {
        ApiResponse<ApplicationLoginDefaultResponse> localVarResp = applicationLoginWithHttpInfo(applicationLoginRequest);
        return localVarResp.getData();
    }

    /**
     * this method requests the auth server give you a token for a particular \&quot;application\&quot;
     * this method requests the auth server give you a token for a particular \&quot;application\&quot;
     * @param applicationLoginRequest this method requests the auth server give you a token for a particular \&quot;application\&quot; (required)
     * @return ApiResponse&lt;ApplicationLoginDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationLoginDefaultResponse> applicationLoginWithHttpInfo(ApplicationLoginRequest applicationLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = applicationLoginValidateBeforeCall(applicationLoginRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationLoginDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * this method requests the auth server give you a token for a particular \&quot;application\&quot; (asynchronously)
     * this method requests the auth server give you a token for a particular \&quot;application\&quot;
     * @param applicationLoginRequest this method requests the auth server give you a token for a particular \&quot;application\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationLoginAsync(ApplicationLoginRequest applicationLoginRequest, final ApiCallback<ApplicationLoginDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationLoginValidateBeforeCall(applicationLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationLoginDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for formsAuthentication
     * @param formsAuthenticationRequest Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call formsAuthenticationCall(FormsAuthenticationRequest formsAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = formsAuthenticationRequest;

        // create path and map variables
        String localVarPath = "/FormsAuthentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call formsAuthenticationValidateBeforeCall(FormsAuthenticationRequest formsAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'formsAuthenticationRequest' is set
        if (formsAuthenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'formsAuthenticationRequest' when calling formsAuthentication(Async)");
        }

        return formsAuthenticationCall(formsAuthenticationRequest, _callback);

    }

    /**
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @param formsAuthenticationRequest Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) (required)
     * @return FormsAuthenticationDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FormsAuthenticationDefaultResponse formsAuthentication(FormsAuthenticationRequest formsAuthenticationRequest) throws ApiException {
        ApiResponse<FormsAuthenticationDefaultResponse> localVarResp = formsAuthenticationWithHttpInfo(formsAuthenticationRequest);
        return localVarResp.getData();
    }

    /**
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @param formsAuthenticationRequest Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) (required)
     * @return ApiResponse&lt;FormsAuthenticationDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FormsAuthenticationDefaultResponse> formsAuthenticationWithHttpInfo(FormsAuthenticationRequest formsAuthenticationRequest) throws ApiException {
        okhttp3.Call localVarCall = formsAuthenticationValidateBeforeCall(formsAuthenticationRequest, null);
        Type localVarReturnType = new TypeToken<FormsAuthenticationDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) (asynchronously)
     * Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin)
     * @param formsAuthenticationRequest Provide a username and SHA1 encoded password to log into the system.  It is always recommended that this method be called via a secured method.              Should be followed by a call to @see(ApplicationLogin) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call formsAuthenticationAsync(FormsAuthenticationRequest formsAuthenticationRequest, final ApiCallback<FormsAuthenticationDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = formsAuthenticationValidateBeforeCall(formsAuthenticationRequest, _callback);
        Type localVarReturnType = new TypeToken<FormsAuthenticationDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIdentityUrl
     * @param getIdentityUrlRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdentityUrlCall(GetIdentityUrlRequest getIdentityUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getIdentityUrlRequest;

        // create path and map variables
        String localVarPath = "/GetIdentityUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentityUrlValidateBeforeCall(GetIdentityUrlRequest getIdentityUrlRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getIdentityUrlRequest' is set
        if (getIdentityUrlRequest == null) {
            throw new ApiException("Missing the required parameter 'getIdentityUrlRequest' when calling getIdentityUrl(Async)");
        }

        return getIdentityUrlCall(getIdentityUrlRequest, _callback);

    }

    /**
     * 
     * 
     * @param getIdentityUrlRequest  (required)
     * @return GetIdentityUrlDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetIdentityUrlDefaultResponse getIdentityUrl(GetIdentityUrlRequest getIdentityUrlRequest) throws ApiException {
        ApiResponse<GetIdentityUrlDefaultResponse> localVarResp = getIdentityUrlWithHttpInfo(getIdentityUrlRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getIdentityUrlRequest  (required)
     * @return ApiResponse&lt;GetIdentityUrlDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIdentityUrlDefaultResponse> getIdentityUrlWithHttpInfo(GetIdentityUrlRequest getIdentityUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = getIdentityUrlValidateBeforeCall(getIdentityUrlRequest, null);
        Type localVarReturnType = new TypeToken<GetIdentityUrlDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getIdentityUrlRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdentityUrlAsync(GetIdentityUrlRequest getIdentityUrlRequest, final ApiCallback<GetIdentityUrlDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentityUrlValidateBeforeCall(getIdentityUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<GetIdentityUrlDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteDetails
     * @param getSiteDetailsRequest Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteDetailsCall(GetSiteDetailsRequest getSiteDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSiteDetailsRequest;

        // create path and map variables
        String localVarPath = "/GetSiteDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteDetailsValidateBeforeCall(GetSiteDetailsRequest getSiteDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSiteDetailsRequest' is set
        if (getSiteDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'getSiteDetailsRequest' when calling getSiteDetails(Async)");
        }

        return getSiteDetailsCall(getSiteDetailsRequest, _callback);

    }

    /**
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @param getSiteDetailsRequest Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. (required)
     * @return ApplicationLoginDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationLoginDefaultResponse getSiteDetails(GetSiteDetailsRequest getSiteDetailsRequest) throws ApiException {
        ApiResponse<ApplicationLoginDefaultResponse> localVarResp = getSiteDetailsWithHttpInfo(getSiteDetailsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @param getSiteDetailsRequest Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. (required)
     * @return ApiResponse&lt;ApplicationLoginDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationLoginDefaultResponse> getSiteDetailsWithHttpInfo(GetSiteDetailsRequest getSiteDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = getSiteDetailsValidateBeforeCall(getSiteDetailsRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationLoginDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. (asynchronously)
     * Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method.
     * @param getSiteDetailsRequest Returns the details for a particular application.  This is the same information as returned when you call @see(ApplicationLogin) but you will not receive an access token from this method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteDetailsAsync(GetSiteDetailsRequest getSiteDetailsRequest, final ApiCallback<ApplicationLoginDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteDetailsValidateBeforeCall(getSiteDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationLoginDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logoutCall(_callback);

    }

    /**
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse logout() throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = logoutWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> logoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin) (asynchronously)
     * Logs the requested token out of the authentication system and out of any application for which a call has been made to @see(ApplicationLogin)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nTLMAuthentication
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nTLMAuthenticationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/NTLMAuthentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nTLMAuthenticationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return nTLMAuthenticationCall(_callback);

    }

    /**
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * @return FormsAuthenticationDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FormsAuthenticationDefaultResponse nTLMAuthentication() throws ApiException {
        ApiResponse<FormsAuthenticationDefaultResponse> localVarResp = nTLMAuthenticationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * @return ApiResponse&lt;FormsAuthenticationDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FormsAuthenticationDefaultResponse> nTLMAuthenticationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = nTLMAuthenticationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<FormsAuthenticationDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function. (asynchronously)
     * If you have configured NTLM authentication properly, you can use this to get an authentication token.  Please note you must have configured IIS and everything correctly for this method to function.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nTLMAuthenticationAsync(final ApiCallback<FormsAuthenticationDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = nTLMAuthenticationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<FormsAuthenticationDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openIdAuthentication
     * @param code  (optional)
     * @param state  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openIdAuthenticationCall(String code, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/OpenIdAuthentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Code", code));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("State", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openIdAuthenticationValidateBeforeCall(String code, String state, final ApiCallback _callback) throws ApiException {
        return openIdAuthenticationCall(code, state, _callback);

    }

    /**
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * @param code  (optional)
     * @param state  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object openIdAuthentication(String code, String state) throws ApiException {
        ApiResponse<Object> localVarResp = openIdAuthenticationWithHttpInfo(code, state);
        return localVarResp.getData();
    }

    /**
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * @param code  (optional)
     * @param state  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openIdAuthenticationWithHttpInfo(String code, String state) throws ApiException {
        okhttp3.Call localVarCall = openIdAuthenticationValidateBeforeCall(code, state, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation. (asynchronously)
     * Use an Open Id Connect token to connect.  Your system must be configured to allow this; please review the documentation.
     * @param code  (optional)
     * @param state  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openIdAuthenticationAsync(String code, String state, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openIdAuthenticationValidateBeforeCall(code, state, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sAMLAuthentication
     * @param saMLAuthenticationRequest Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sAMLAuthenticationCall(SAMLAuthenticationRequest saMLAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saMLAuthenticationRequest;

        // create path and map variables
        String localVarPath = "/SAMLAuthentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sAMLAuthenticationValidateBeforeCall(SAMLAuthenticationRequest saMLAuthenticationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'saMLAuthenticationRequest' is set
        if (saMLAuthenticationRequest == null) {
            throw new ApiException("Missing the required parameter 'saMLAuthenticationRequest' when calling sAMLAuthentication(Async)");
        }

        return sAMLAuthenticationCall(saMLAuthenticationRequest, _callback);

    }

    /**
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @param saMLAuthenticationRequest Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. (required)
     * @return FormsAuthenticationDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FormsAuthenticationDefaultResponse sAMLAuthentication(SAMLAuthenticationRequest saMLAuthenticationRequest) throws ApiException {
        ApiResponse<FormsAuthenticationDefaultResponse> localVarResp = sAMLAuthenticationWithHttpInfo(saMLAuthenticationRequest);
        return localVarResp.getData();
    }

    /**
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @param saMLAuthenticationRequest Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. (required)
     * @return ApiResponse&lt;FormsAuthenticationDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FormsAuthenticationDefaultResponse> sAMLAuthenticationWithHttpInfo(SAMLAuthenticationRequest saMLAuthenticationRequest) throws ApiException {
        okhttp3.Call localVarCall = sAMLAuthenticationValidateBeforeCall(saMLAuthenticationRequest, null);
        Type localVarReturnType = new TypeToken<FormsAuthenticationDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. (asynchronously)
     * Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information.
     * @param saMLAuthenticationRequest Provided a valid SAML [Base64 encoded] token, this will return back an auth server token and application information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sAMLAuthenticationAsync(SAMLAuthenticationRequest saMLAuthenticationRequest, final ApiCallback<FormsAuthenticationDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sAMLAuthenticationValidateBeforeCall(saMLAuthenticationRequest, _callback);
        Type localVarReturnType = new TypeToken<FormsAuthenticationDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
