/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiCallback;
import com.alterian.auth.ApiClient;
import com.alterian.auth.ApiException;
import com.alterian.auth.ApiResponse;
import com.alterian.auth.Configuration;
import com.alterian.auth.Pair;
import com.alterian.auth.ProgressRequestBody;
import com.alterian.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.auth.model.GetCertificatesRequest;
import com.alterian.auth.model.GetHostNamesDefaultResponse;
import com.alterian.auth.model.GetSiteDefaultResponse;
import com.alterian.auth.model.GetSiteRequest;
import com.alterian.auth.model.GetSiteTypesDefaultResponse;
import com.alterian.auth.model.GetSitesDefaultResponse;
import com.alterian.auth.model.GetSitesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SitesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SitesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHostNames
     * @param getCertificatesRequest This is the name of the server that you have IMS running on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostNamesCall(GetCertificatesRequest getCertificatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCertificatesRequest;

        // create path and map variables
        String localVarPath = "/GetHostNames";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHostNamesValidateBeforeCall(GetCertificatesRequest getCertificatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getCertificatesRequest' is set
        if (getCertificatesRequest == null) {
            throw new ApiException("Missing the required parameter 'getCertificatesRequest' when calling getHostNames(Async)");
        }

        return getHostNamesCall(getCertificatesRequest, _callback);

    }

    /**
     * This is the name of the server that you have IMS running on
     * This is the name of the server that you have IMS running on
     * @param getCertificatesRequest This is the name of the server that you have IMS running on (required)
     * @return GetHostNamesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetHostNamesDefaultResponse getHostNames(GetCertificatesRequest getCertificatesRequest) throws ApiException {
        ApiResponse<GetHostNamesDefaultResponse> localVarResp = getHostNamesWithHttpInfo(getCertificatesRequest);
        return localVarResp.getData();
    }

    /**
     * This is the name of the server that you have IMS running on
     * This is the name of the server that you have IMS running on
     * @param getCertificatesRequest This is the name of the server that you have IMS running on (required)
     * @return ApiResponse&lt;GetHostNamesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetHostNamesDefaultResponse> getHostNamesWithHttpInfo(GetCertificatesRequest getCertificatesRequest) throws ApiException {
        okhttp3.Call localVarCall = getHostNamesValidateBeforeCall(getCertificatesRequest, null);
        Type localVarReturnType = new TypeToken<GetHostNamesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This is the name of the server that you have IMS running on (asynchronously)
     * This is the name of the server that you have IMS running on
     * @param getCertificatesRequest This is the name of the server that you have IMS running on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHostNamesAsync(GetCertificatesRequest getCertificatesRequest, final ApiCallback<GetHostNamesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHostNamesValidateBeforeCall(getCertificatesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetHostNamesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSite
     * @param getSiteRequest Return back a specific @see(AuthSite) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteCall(GetSiteRequest getSiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSiteRequest;

        // create path and map variables
        String localVarPath = "/GetSite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteValidateBeforeCall(GetSiteRequest getSiteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSiteRequest' is set
        if (getSiteRequest == null) {
            throw new ApiException("Missing the required parameter 'getSiteRequest' when calling getSite(Async)");
        }

        return getSiteCall(getSiteRequest, _callback);

    }

    /**
     * Return back a specific @see(AuthSite)
     * Return back a specific @see(AuthSite)
     * @param getSiteRequest Return back a specific @see(AuthSite) (required)
     * @return GetSiteDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSiteDefaultResponse getSite(GetSiteRequest getSiteRequest) throws ApiException {
        ApiResponse<GetSiteDefaultResponse> localVarResp = getSiteWithHttpInfo(getSiteRequest);
        return localVarResp.getData();
    }

    /**
     * Return back a specific @see(AuthSite)
     * Return back a specific @see(AuthSite)
     * @param getSiteRequest Return back a specific @see(AuthSite) (required)
     * @return ApiResponse&lt;GetSiteDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSiteDefaultResponse> getSiteWithHttpInfo(GetSiteRequest getSiteRequest) throws ApiException {
        okhttp3.Call localVarCall = getSiteValidateBeforeCall(getSiteRequest, null);
        Type localVarReturnType = new TypeToken<GetSiteDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return back a specific @see(AuthSite) (asynchronously)
     * Return back a specific @see(AuthSite)
     * @param getSiteRequest Return back a specific @see(AuthSite) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteAsync(GetSiteRequest getSiteRequest, final ApiCallback<GetSiteDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteValidateBeforeCall(getSiteRequest, _callback);
        Type localVarReturnType = new TypeToken<GetSiteDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GetSiteTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSiteTypesCall(_callback);

    }

    /**
     * Return back a list of site types for use with @see(GetSites)
     * Return back a list of site types for use with @see(GetSites)
     * @return GetSiteTypesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSiteTypesDefaultResponse getSiteTypes() throws ApiException {
        ApiResponse<GetSiteTypesDefaultResponse> localVarResp = getSiteTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Return back a list of site types for use with @see(GetSites)
     * Return back a list of site types for use with @see(GetSites)
     * @return ApiResponse&lt;GetSiteTypesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSiteTypesDefaultResponse> getSiteTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSiteTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetSiteTypesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return back a list of site types for use with @see(GetSites) (asynchronously)
     * Return back a list of site types for use with @see(GetSites)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteTypesAsync(final ApiCallback<GetSiteTypesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetSiteTypesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSites
     * @param getSitesRequest Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesCall(GetSitesRequest getSitesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSitesRequest;

        // create path and map variables
        String localVarPath = "/GetSites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitesValidateBeforeCall(GetSitesRequest getSitesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getSitesRequest' is set
        if (getSitesRequest == null) {
            throw new ApiException("Missing the required parameter 'getSitesRequest' when calling getSites(Async)");
        }

        return getSitesCall(getSitesRequest, _callback);

    }

    /**
     * Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
     * Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
     * @param getSitesRequest Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier (required)
     * @return GetSitesDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSitesDefaultResponse getSites(GetSitesRequest getSitesRequest) throws ApiException {
        ApiResponse<GetSitesDefaultResponse> localVarResp = getSitesWithHttpInfo(getSitesRequest);
        return localVarResp.getData();
    }

    /**
     * Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
     * Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
     * @param getSitesRequest Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier (required)
     * @return ApiResponse&lt;GetSitesDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSitesDefaultResponse> getSitesWithHttpInfo(GetSitesRequest getSitesRequest) throws ApiException {
        okhttp3.Call localVarCall = getSitesValidateBeforeCall(getSitesRequest, null);
        Type localVarReturnType = new TypeToken<GetSitesDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier (asynchronously)
     * Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier
     * @param getSitesRequest Return back a list of @see(AuthSite)s; useful for APIs which require an authentication site identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesAsync(GetSitesRequest getSitesRequest, final ApiCallback<GetSitesDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitesValidateBeforeCall(getSitesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetSitesDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
