/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiCallback;
import com.alterian.auth.ApiClient;
import com.alterian.auth.ApiException;
import com.alterian.auth.ApiResponse;
import com.alterian.auth.Configuration;
import com.alterian.auth.Pair;
import com.alterian.auth.ProgressRequestBody;
import com.alterian.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.alterian.auth.model.AddCertificateDefaultResponse;
import com.alterian.auth.model.AddIssuerRequest;
import com.alterian.auth.model.DeleteIssuerRequest;
import com.alterian.auth.model.GetCertificatesRequest;
import com.alterian.auth.model.GetIssuerDefaultResponse;
import com.alterian.auth.model.GetIssuerRequest;
import com.alterian.auth.model.GetIssuersDefaultResponse;
import com.alterian.auth.model.LogoutDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssuersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssuersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssuersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addIssuer
     * @param addIssuerRequest Adds an Issuer for a Certificate used with single sign on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIssuerCall(AddIssuerRequest addIssuerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addIssuerRequest;

        // create path and map variables
        String localVarPath = "/AddIssuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIssuerValidateBeforeCall(AddIssuerRequest addIssuerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addIssuerRequest' is set
        if (addIssuerRequest == null) {
            throw new ApiException("Missing the required parameter 'addIssuerRequest' when calling addIssuer(Async)");
        }

        return addIssuerCall(addIssuerRequest, _callback);

    }

    /**
     * Adds an Issuer for a Certificate used with single sign on
     * Adds an Issuer for a Certificate used with single sign on
     * @param addIssuerRequest Adds an Issuer for a Certificate used with single sign on (required)
     * @return AddCertificateDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AddCertificateDefaultResponse addIssuer(AddIssuerRequest addIssuerRequest) throws ApiException {
        ApiResponse<AddCertificateDefaultResponse> localVarResp = addIssuerWithHttpInfo(addIssuerRequest);
        return localVarResp.getData();
    }

    /**
     * Adds an Issuer for a Certificate used with single sign on
     * Adds an Issuer for a Certificate used with single sign on
     * @param addIssuerRequest Adds an Issuer for a Certificate used with single sign on (required)
     * @return ApiResponse&lt;AddCertificateDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddCertificateDefaultResponse> addIssuerWithHttpInfo(AddIssuerRequest addIssuerRequest) throws ApiException {
        okhttp3.Call localVarCall = addIssuerValidateBeforeCall(addIssuerRequest, null);
        Type localVarReturnType = new TypeToken<AddCertificateDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an Issuer for a Certificate used with single sign on (asynchronously)
     * Adds an Issuer for a Certificate used with single sign on
     * @param addIssuerRequest Adds an Issuer for a Certificate used with single sign on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addIssuerAsync(AddIssuerRequest addIssuerRequest, final ApiCallback<AddCertificateDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addIssuerValidateBeforeCall(addIssuerRequest, _callback);
        Type localVarReturnType = new TypeToken<AddCertificateDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIssuer
     * @param deleteIssuerRequest Deletes an @see(Issuer) for a Certificate used with single sign on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIssuerCall(DeleteIssuerRequest deleteIssuerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteIssuerRequest;

        // create path and map variables
        String localVarPath = "/DeleteIssuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIssuerValidateBeforeCall(DeleteIssuerRequest deleteIssuerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteIssuerRequest' is set
        if (deleteIssuerRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteIssuerRequest' when calling deleteIssuer(Async)");
        }

        return deleteIssuerCall(deleteIssuerRequest, _callback);

    }

    /**
     * Deletes an @see(Issuer) for a Certificate used with single sign on
     * Deletes an @see(Issuer) for a Certificate used with single sign on
     * @param deleteIssuerRequest Deletes an @see(Issuer) for a Certificate used with single sign on (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse deleteIssuer(DeleteIssuerRequest deleteIssuerRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = deleteIssuerWithHttpInfo(deleteIssuerRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes an @see(Issuer) for a Certificate used with single sign on
     * Deletes an @see(Issuer) for a Certificate used with single sign on
     * @param deleteIssuerRequest Deletes an @see(Issuer) for a Certificate used with single sign on (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> deleteIssuerWithHttpInfo(DeleteIssuerRequest deleteIssuerRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteIssuerValidateBeforeCall(deleteIssuerRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an @see(Issuer) for a Certificate used with single sign on (asynchronously)
     * Deletes an @see(Issuer) for a Certificate used with single sign on
     * @param deleteIssuerRequest Deletes an @see(Issuer) for a Certificate used with single sign on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIssuerAsync(DeleteIssuerRequest deleteIssuerRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIssuerValidateBeforeCall(deleteIssuerRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuer
     * @param getIssuerRequest Retrieves an Issuer for a Certificate used with single sign on (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuerCall(GetIssuerRequest getIssuerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getIssuerRequest;

        // create path and map variables
        String localVarPath = "/GetIssuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuerValidateBeforeCall(GetIssuerRequest getIssuerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getIssuerRequest' is set
        if (getIssuerRequest == null) {
            throw new ApiException("Missing the required parameter 'getIssuerRequest' when calling getIssuer(Async)");
        }

        return getIssuerCall(getIssuerRequest, _callback);

    }

    /**
     * Retrieves an Issuer for a Certificate used with single sign on
     * Retrieves an Issuer for a Certificate used with single sign on
     * @param getIssuerRequest Retrieves an Issuer for a Certificate used with single sign on (required)
     * @return GetIssuerDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetIssuerDefaultResponse getIssuer(GetIssuerRequest getIssuerRequest) throws ApiException {
        ApiResponse<GetIssuerDefaultResponse> localVarResp = getIssuerWithHttpInfo(getIssuerRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieves an Issuer for a Certificate used with single sign on
     * Retrieves an Issuer for a Certificate used with single sign on
     * @param getIssuerRequest Retrieves an Issuer for a Certificate used with single sign on (required)
     * @return ApiResponse&lt;GetIssuerDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIssuerDefaultResponse> getIssuerWithHttpInfo(GetIssuerRequest getIssuerRequest) throws ApiException {
        okhttp3.Call localVarCall = getIssuerValidateBeforeCall(getIssuerRequest, null);
        Type localVarReturnType = new TypeToken<GetIssuerDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an Issuer for a Certificate used with single sign on (asynchronously)
     * Retrieves an Issuer for a Certificate used with single sign on
     * @param getIssuerRequest Retrieves an Issuer for a Certificate used with single sign on (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuerAsync(GetIssuerRequest getIssuerRequest, final ApiCallback<GetIssuerDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuerValidateBeforeCall(getIssuerRequest, _callback);
        Type localVarReturnType = new TypeToken<GetIssuerDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIssuers
     * @param getCertificatesRequest Gets a list of available issuers (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuersCall(GetCertificatesRequest getCertificatesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCertificatesRequest;

        // create path and map variables
        String localVarPath = "/GetIssuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssuersValidateBeforeCall(GetCertificatesRequest getCertificatesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getCertificatesRequest' is set
        if (getCertificatesRequest == null) {
            throw new ApiException("Missing the required parameter 'getCertificatesRequest' when calling getIssuers(Async)");
        }

        return getIssuersCall(getCertificatesRequest, _callback);

    }

    /**
     * Gets a list of available issuers
     * Gets a list of available issuers
     * @param getCertificatesRequest Gets a list of available issuers (required)
     * @return GetIssuersDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetIssuersDefaultResponse getIssuers(GetCertificatesRequest getCertificatesRequest) throws ApiException {
        ApiResponse<GetIssuersDefaultResponse> localVarResp = getIssuersWithHttpInfo(getCertificatesRequest);
        return localVarResp.getData();
    }

    /**
     * Gets a list of available issuers
     * Gets a list of available issuers
     * @param getCertificatesRequest Gets a list of available issuers (required)
     * @return ApiResponse&lt;GetIssuersDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIssuersDefaultResponse> getIssuersWithHttpInfo(GetCertificatesRequest getCertificatesRequest) throws ApiException {
        okhttp3.Call localVarCall = getIssuersValidateBeforeCall(getCertificatesRequest, null);
        Type localVarReturnType = new TypeToken<GetIssuersDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of available issuers (asynchronously)
     * Gets a list of available issuers
     * @param getCertificatesRequest Gets a list of available issuers (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssuersAsync(GetCertificatesRequest getCertificatesRequest, final ApiCallback<GetIssuersDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssuersValidateBeforeCall(getCertificatesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetIssuersDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIssuer
     * @param addIssuerRequest Updates information associated with a certificate&#39;s issuer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIssuerCall(AddIssuerRequest addIssuerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addIssuerRequest;

        // create path and map variables
        String localVarPath = "/UpdateIssuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIssuerValidateBeforeCall(AddIssuerRequest addIssuerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addIssuerRequest' is set
        if (addIssuerRequest == null) {
            throw new ApiException("Missing the required parameter 'addIssuerRequest' when calling updateIssuer(Async)");
        }

        return updateIssuerCall(addIssuerRequest, _callback);

    }

    /**
     * Updates information associated with a certificate&#39;s issuer
     * Updates information associated with a certificate&#39;s issuer
     * @param addIssuerRequest Updates information associated with a certificate&#39;s issuer (required)
     * @return LogoutDefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LogoutDefaultResponse updateIssuer(AddIssuerRequest addIssuerRequest) throws ApiException {
        ApiResponse<LogoutDefaultResponse> localVarResp = updateIssuerWithHttpInfo(addIssuerRequest);
        return localVarResp.getData();
    }

    /**
     * Updates information associated with a certificate&#39;s issuer
     * Updates information associated with a certificate&#39;s issuer
     * @param addIssuerRequest Updates information associated with a certificate&#39;s issuer (required)
     * @return ApiResponse&lt;LogoutDefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutDefaultResponse> updateIssuerWithHttpInfo(AddIssuerRequest addIssuerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateIssuerValidateBeforeCall(addIssuerRequest, null);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates information associated with a certificate&#39;s issuer (asynchronously)
     * Updates information associated with a certificate&#39;s issuer
     * @param addIssuerRequest Updates information associated with a certificate&#39;s issuer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIssuerAsync(AddIssuerRequest addIssuerRequest, final ApiCallback<LogoutDefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIssuerValidateBeforeCall(addIssuerRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutDefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
