/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.model;

import java.util.Objects;
import com.alterian.auth.model.SettingValue;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.auth.JSON;

/**
 * Info for a particular login
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class LoginInfo {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private UUID ID;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WINDOWS_AUTHENTICATION = "WindowsAuthentication";
  @SerializedName(SERIALIZED_NAME_WINDOWS_AUTHENTICATION)
  private Boolean windowsAuthentication;

  public static final String SERIALIZED_NAME_SETTINGS = "Settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private List<SettingValue> settings;

  public static final String SERIALIZED_NAME_NEW_PASSWORD = "NewPassword";
  @SerializedName(SERIALIZED_NAME_NEW_PASSWORD)
  private String newPassword;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRES = "PasswordExpires";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRES)
  private OffsetDateTime passwordExpires;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "LastLogin";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MODIFIED = "Modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public LoginInfo() {
  }

  public LoginInfo ID(UUID ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Id of the login
   * @return ID
  **/
  @javax.annotation.Nullable
  public UUID getID() {
    return ID;
  }

  public void setID(UUID ID) {
    this.ID = ID;
  }


  public LoginInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The login name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LoginInfo windowsAuthentication(Boolean windowsAuthentication) {
    this.windowsAuthentication = windowsAuthentication;
    return this;
  }

   /**
   * Does this login use external authentication?
   * @return windowsAuthentication
  **/
  @javax.annotation.Nullable
  public Boolean getWindowsAuthentication() {
    return windowsAuthentication;
  }

  public void setWindowsAuthentication(Boolean windowsAuthentication) {
    this.windowsAuthentication = windowsAuthentication;
  }


  public LoginInfo settings(List<SettingValue> settings) {
    this.settings = settings;
    return this;
  }

  public LoginInfo addSettingsItem(SettingValue settingsItem) {
    if (this.settings == null) {
      this.settings = new ArrayList<>();
    }
    this.settings.add(settingsItem);
    return this;
  }

   /**
   * Settings for this login
   * @return settings
  **/
  @javax.annotation.Nullable
  public List<SettingValue> getSettings() {
    return settings;
  }

  public void setSettings(List<SettingValue> settings) {
    this.settings = settings;
  }


  public LoginInfo newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

   /**
   * If you want to update the password for a login, include a NewPassword.  You can use this in a call to @see(UpdateLogin)
   * @return newPassword
  **/
  @javax.annotation.Nullable
  public String getNewPassword() {
    return newPassword;
  }

  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public LoginInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Is this login flagged as disabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public LoginInfo passwordExpires(OffsetDateTime passwordExpires) {
    this.passwordExpires = passwordExpires;
    return this;
  }

   /**
   * If set, this is when the password for this login will expire.  Any changes to this will be compared to the password policy
   * @return passwordExpires
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getPasswordExpires() {
    return passwordExpires;
  }

  public void setPasswordExpires(OffsetDateTime passwordExpires) {
    this.passwordExpires = passwordExpires;
  }


  public LoginInfo lastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Last time this login was used
   * @return lastLogin
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }

  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }


  public LoginInfo created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * When was this login created
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public LoginInfo modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Last time this login was modified
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginInfo loginInfo = (LoginInfo) o;
    return Objects.equals(this.ID, loginInfo.ID) &&
        Objects.equals(this.name, loginInfo.name) &&
        Objects.equals(this.windowsAuthentication, loginInfo.windowsAuthentication) &&
        Objects.equals(this.settings, loginInfo.settings) &&
        Objects.equals(this.newPassword, loginInfo.newPassword) &&
        Objects.equals(this.enabled, loginInfo.enabled) &&
        Objects.equals(this.passwordExpires, loginInfo.passwordExpires) &&
        Objects.equals(this.lastLogin, loginInfo.lastLogin) &&
        Objects.equals(this.created, loginInfo.created) &&
        Objects.equals(this.modified, loginInfo.modified);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, name, windowsAuthentication, settings, newPassword, enabled, passwordExpires, lastLogin, created, modified);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginInfo {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    windowsAuthentication: ").append(toIndentedString(windowsAuthentication)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    passwordExpires: ").append(toIndentedString(passwordExpires)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Name");
    openapiFields.add("WindowsAuthentication");
    openapiFields.add("Settings");
    openapiFields.add("NewPassword");
    openapiFields.add("Enabled");
    openapiFields.add("PasswordExpires");
    openapiFields.add("LastLogin");
    openapiFields.add("Created");
    openapiFields.add("Modified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoginInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginInfo is not found in the empty JSON string", LoginInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("Settings") != null && !jsonObj.get("Settings").isJsonNull()) {
        JsonArray jsonArraysettings = jsonObj.getAsJsonArray("Settings");
        if (jsonArraysettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Settings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Settings` to be an array in the JSON string but got `%s`", jsonObj.get("Settings").toString()));
          }

          // validate the optional field `Settings` (array)
          for (int i = 0; i < jsonArraysettings.size(); i++) {
            SettingValue.validateJsonElement(jsonArraysettings.get(i));
          };
        }
      }
      if ((jsonObj.get("NewPassword") != null && !jsonObj.get("NewPassword").isJsonNull()) && !jsonObj.get("NewPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewPassword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginInfo>() {
           @Override
           public void write(JsonWriter out, LoginInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoginInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoginInfo
  * @throws IOException if the JSON string is invalid with respect to LoginInfo
  */
  public static LoginInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginInfo.class);
  }

 /**
  * Convert an instance of LoginInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

