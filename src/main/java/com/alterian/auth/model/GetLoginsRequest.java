/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.auth.JSON;

/**
 * GetLoginsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetLoginsRequest {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXCLUSION = "Exclusion";
  @SerializedName(SERIALIZED_NAME_EXCLUSION)
  private List<UUID> exclusion;

  public static final String SERIALIZED_NAME_INCLUSION = "Inclusion";
  @SerializedName(SERIALIZED_NAME_INCLUSION)
  private List<UUID> inclusion;

  public static final String SERIALIZED_NAME_NO_SETTINGS = "NoSettings";
  @SerializedName(SERIALIZED_NAME_NO_SETTINGS)
  private Boolean noSettings;

  public static final String SERIALIZED_NAME_SETTING_VALUES = "SettingValues";
  @SerializedName(SERIALIZED_NAME_SETTING_VALUES)
  private Map<String, Integer> settingValues = new HashMap<>();

  public GetLoginsRequest() {
  }

  public GetLoginsRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * If you want to query by the enabled, provide this parameter
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public GetLoginsRequest exclusion(List<UUID> exclusion) {
    this.exclusion = exclusion;
    return this;
  }

  public GetLoginsRequest addExclusionItem(UUID exclusionItem) {
    if (this.exclusion == null) {
      this.exclusion = new ArrayList<>();
    }
    this.exclusion.add(exclusionItem);
    return this;
  }

   /**
   * List of login Ids to exclude from the result
   * @return exclusion
  **/
  @javax.annotation.Nullable
  public List<UUID> getExclusion() {
    return exclusion;
  }

  public void setExclusion(List<UUID> exclusion) {
    this.exclusion = exclusion;
  }


  public GetLoginsRequest inclusion(List<UUID> inclusion) {
    this.inclusion = inclusion;
    return this;
  }

  public GetLoginsRequest addInclusionItem(UUID inclusionItem) {
    if (this.inclusion == null) {
      this.inclusion = new ArrayList<>();
    }
    this.inclusion.add(inclusionItem);
    return this;
  }

   /**
   * List of login Ids to return
   * @return inclusion
  **/
  @javax.annotation.Nullable
  public List<UUID> getInclusion() {
    return inclusion;
  }

  public void setInclusion(List<UUID> inclusion) {
    this.inclusion = inclusion;
  }


  public GetLoginsRequest noSettings(Boolean noSettings) {
    this.noSettings = noSettings;
    return this;
  }

   /**
   * If you do not want settings to be returns, pass in true
   * @return noSettings
  **/
  @javax.annotation.Nullable
  public Boolean getNoSettings() {
    return noSettings;
  }

  public void setNoSettings(Boolean noSettings) {
    this.noSettings = noSettings;
  }


  public GetLoginsRequest settingValues(Map<String, Integer> settingValues) {
    this.settingValues = settingValues;
    return this;
  }

  public GetLoginsRequest putSettingValuesItem(String key, Integer settingValuesItem) {
    if (this.settingValues == null) {
      this.settingValues = new HashMap<>();
    }
    this.settingValues.put(key, settingValuesItem);
    return this;
  }

   /**
   * If you would like to query by setting value, populate this dictionary
   * @return settingValues
  **/
  @javax.annotation.Nullable
  public Map<String, Integer> getSettingValues() {
    return settingValues;
  }

  public void setSettingValues(Map<String, Integer> settingValues) {
    this.settingValues = settingValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetLoginsRequest getLoginsRequest = (GetLoginsRequest) o;
    return Objects.equals(this.enabled, getLoginsRequest.enabled) &&
        Objects.equals(this.exclusion, getLoginsRequest.exclusion) &&
        Objects.equals(this.inclusion, getLoginsRequest.inclusion) &&
        Objects.equals(this.noSettings, getLoginsRequest.noSettings) &&
        Objects.equals(this.settingValues, getLoginsRequest.settingValues);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, exclusion, inclusion, noSettings, settingValues);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetLoginsRequest {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    exclusion: ").append(toIndentedString(exclusion)).append("\n");
    sb.append("    inclusion: ").append(toIndentedString(inclusion)).append("\n");
    sb.append("    noSettings: ").append(toIndentedString(noSettings)).append("\n");
    sb.append("    settingValues: ").append(toIndentedString(settingValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("Exclusion");
    openapiFields.add("Inclusion");
    openapiFields.add("NoSettings");
    openapiFields.add("SettingValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetLoginsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetLoginsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetLoginsRequest is not found in the empty JSON string", GetLoginsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetLoginsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetLoginsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Exclusion") != null && !jsonObj.get("Exclusion").isJsonNull() && !jsonObj.get("Exclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Exclusion` to be an array in the JSON string but got `%s`", jsonObj.get("Exclusion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Inclusion") != null && !jsonObj.get("Inclusion").isJsonNull() && !jsonObj.get("Inclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Inclusion` to be an array in the JSON string but got `%s`", jsonObj.get("Inclusion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetLoginsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetLoginsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetLoginsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetLoginsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetLoginsRequest>() {
           @Override
           public void write(JsonWriter out, GetLoginsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetLoginsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetLoginsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetLoginsRequest
  * @throws IOException if the JSON string is invalid with respect to GetLoginsRequest
  */
  public static GetLoginsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetLoginsRequest.class);
  }

 /**
  * Convert an instance of GetLoginsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

