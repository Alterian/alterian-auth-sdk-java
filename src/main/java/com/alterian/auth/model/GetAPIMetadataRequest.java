/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.model;

import java.util.Objects;
import com.alterian.auth.model.APICursor;
import com.alterian.auth.model.APIMetadataType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.auth.JSON;

/**
 * GetAPIMetadataRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class GetAPIMetadataRequest {
  public static final String SERIALIZED_NAME_CURSOR = "Cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private APICursor cursor;

  public static final String SERIALIZED_NAME_INCLUDE_EMPTY = "IncludeEmpty";
  @SerializedName(SERIALIZED_NAME_INCLUDE_EMPTY)
  private Boolean includeEmpty;

  public static final String SERIALIZED_NAME_METADATA_NAME = "MetadataName";
  @SerializedName(SERIALIZED_NAME_METADATA_NAME)
  private String metadataName;

  public static final String SERIALIZED_NAME_METADATA_TYPE = "MetadataType";
  @SerializedName(SERIALIZED_NAME_METADATA_TYPE)
  private APIMetadataType metadataType;

  public GetAPIMetadataRequest() {
  }

  public GetAPIMetadataRequest cursor(APICursor cursor) {
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable
  public APICursor getCursor() {
    return cursor;
  }

  public void setCursor(APICursor cursor) {
    this.cursor = cursor;
  }


  public GetAPIMetadataRequest includeEmpty(Boolean includeEmpty) {
    this.includeEmpty = includeEmpty;
    return this;
  }

   /**
   * 
   * @return includeEmpty
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeEmpty() {
    return includeEmpty;
  }

  public void setIncludeEmpty(Boolean includeEmpty) {
    this.includeEmpty = includeEmpty;
  }


  public GetAPIMetadataRequest metadataName(String metadataName) {
    this.metadataName = metadataName;
    return this;
  }

   /**
   * 
   * @return metadataName
  **/
  @javax.annotation.Nullable
  public String getMetadataName() {
    return metadataName;
  }

  public void setMetadataName(String metadataName) {
    this.metadataName = metadataName;
  }


  public GetAPIMetadataRequest metadataType(APIMetadataType metadataType) {
    this.metadataType = metadataType;
    return this;
  }

   /**
   * Get metadataType
   * @return metadataType
  **/
  @javax.annotation.Nullable
  public APIMetadataType getMetadataType() {
    return metadataType;
  }

  public void setMetadataType(APIMetadataType metadataType) {
    this.metadataType = metadataType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAPIMetadataRequest getAPIMetadataRequest = (GetAPIMetadataRequest) o;
    return Objects.equals(this.cursor, getAPIMetadataRequest.cursor) &&
        Objects.equals(this.includeEmpty, getAPIMetadataRequest.includeEmpty) &&
        Objects.equals(this.metadataName, getAPIMetadataRequest.metadataName) &&
        Objects.equals(this.metadataType, getAPIMetadataRequest.metadataType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cursor, includeEmpty, metadataName, metadataType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAPIMetadataRequest {\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    includeEmpty: ").append(toIndentedString(includeEmpty)).append("\n");
    sb.append("    metadataName: ").append(toIndentedString(metadataName)).append("\n");
    sb.append("    metadataType: ").append(toIndentedString(metadataType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Cursor");
    openapiFields.add("IncludeEmpty");
    openapiFields.add("MetadataName");
    openapiFields.add("MetadataType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetAPIMetadataRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAPIMetadataRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAPIMetadataRequest is not found in the empty JSON string", GetAPIMetadataRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAPIMetadataRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAPIMetadataRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Cursor`
      if (jsonObj.get("Cursor") != null && !jsonObj.get("Cursor").isJsonNull()) {
        APICursor.validateJsonElement(jsonObj.get("Cursor"));
      }
      if ((jsonObj.get("MetadataName") != null && !jsonObj.get("MetadataName").isJsonNull()) && !jsonObj.get("MetadataName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MetadataName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MetadataName").toString()));
      }
      // validate the optional field `MetadataType`
      if (jsonObj.get("MetadataType") != null && !jsonObj.get("MetadataType").isJsonNull()) {
        APIMetadataType.validateJsonElement(jsonObj.get("MetadataType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAPIMetadataRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAPIMetadataRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAPIMetadataRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAPIMetadataRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAPIMetadataRequest>() {
           @Override
           public void write(JsonWriter out, GetAPIMetadataRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAPIMetadataRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAPIMetadataRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAPIMetadataRequest
  * @throws IOException if the JSON string is invalid with respect to GetAPIMetadataRequest
  */
  public static GetAPIMetadataRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAPIMetadataRequest.class);
  }

 /**
  * Convert an instance of GetAPIMetadataRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

