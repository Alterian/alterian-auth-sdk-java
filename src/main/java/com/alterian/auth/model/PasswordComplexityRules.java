/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.alterian.auth.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class PasswordComplexityRules {
  public static final String SERIALIZED_NAME_MINIMUM_LENGTH = "MinimumLength";
  @SerializedName(SERIALIZED_NAME_MINIMUM_LENGTH)
  private byte[] minimumLength;

  public static final String SERIALIZED_NAME_NUM_CHARS = "NumChars";
  @SerializedName(SERIALIZED_NAME_NUM_CHARS)
  private byte[] numChars;

  public static final String SERIALIZED_NAME_NUM_NUMERIC = "NumNumeric";
  @SerializedName(SERIALIZED_NAME_NUM_NUMERIC)
  private byte[] numNumeric;

  public static final String SERIALIZED_NAME_NUM_SPECIAL = "NumSpecial";
  @SerializedName(SERIALIZED_NAME_NUM_SPECIAL)
  private byte[] numSpecial;

  public static final String SERIALIZED_NAME_REQUIRE_MIXED_CASE = "RequireMixedCase";
  @SerializedName(SERIALIZED_NAME_REQUIRE_MIXED_CASE)
  private Boolean requireMixedCase;

  public static final String SERIALIZED_NAME_PASSWORD_REUSE = "PasswordReuse";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REUSE)
  private byte[] passwordReuse;

  public PasswordComplexityRules() {
  }

  public PasswordComplexityRules minimumLength(byte[] minimumLength) {
    this.minimumLength = minimumLength;
    return this;
  }

   /**
   * Total minimum length of password
   * @return minimumLength
  **/
  @javax.annotation.Nullable
  public byte[] getMinimumLength() {
    return minimumLength;
  }

  public void setMinimumLength(byte[] minimumLength) {
    this.minimumLength = minimumLength;
  }


  public PasswordComplexityRules numChars(byte[] numChars) {
    this.numChars = numChars;
    return this;
  }

   /**
   * Minimum number of non-numeric, non-special characters
   * @return numChars
  **/
  @javax.annotation.Nullable
  public byte[] getNumChars() {
    return numChars;
  }

  public void setNumChars(byte[] numChars) {
    this.numChars = numChars;
  }


  public PasswordComplexityRules numNumeric(byte[] numNumeric) {
    this.numNumeric = numNumeric;
    return this;
  }

   /**
   * Minimum number of numeric values in password
   * @return numNumeric
  **/
  @javax.annotation.Nullable
  public byte[] getNumNumeric() {
    return numNumeric;
  }

  public void setNumNumeric(byte[] numNumeric) {
    this.numNumeric = numNumeric;
  }


  public PasswordComplexityRules numSpecial(byte[] numSpecial) {
    this.numSpecial = numSpecial;
    return this;
  }

   /**
   * Minimum number of special characters in password (special characters include %[&#x60;!@#$%&amp;*()_&#x3D;+\\|{};\&quot;,/])
   * @return numSpecial
  **/
  @javax.annotation.Nullable
  public byte[] getNumSpecial() {
    return numSpecial;
  }

  public void setNumSpecial(byte[] numSpecial) {
    this.numSpecial = numSpecial;
  }


  public PasswordComplexityRules requireMixedCase(Boolean requireMixedCase) {
    this.requireMixedCase = requireMixedCase;
    return this;
  }

   /**
   * Are Upper and Lower case characters required
   * @return requireMixedCase
  **/
  @javax.annotation.Nullable
  public Boolean getRequireMixedCase() {
    return requireMixedCase;
  }

  public void setRequireMixedCase(Boolean requireMixedCase) {
    this.requireMixedCase = requireMixedCase;
  }


  public PasswordComplexityRules passwordReuse(byte[] passwordReuse) {
    this.passwordReuse = passwordReuse;
    return this;
  }

   /**
   * Can the password be changed to a previously used value
   * @return passwordReuse
  **/
  @javax.annotation.Nullable
  public byte[] getPasswordReuse() {
    return passwordReuse;
  }

  public void setPasswordReuse(byte[] passwordReuse) {
    this.passwordReuse = passwordReuse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordComplexityRules passwordComplexityRules = (PasswordComplexityRules) o;
    return Arrays.equals(this.minimumLength, passwordComplexityRules.minimumLength) &&
        Arrays.equals(this.numChars, passwordComplexityRules.numChars) &&
        Arrays.equals(this.numNumeric, passwordComplexityRules.numNumeric) &&
        Arrays.equals(this.numSpecial, passwordComplexityRules.numSpecial) &&
        Objects.equals(this.requireMixedCase, passwordComplexityRules.requireMixedCase) &&
        Arrays.equals(this.passwordReuse, passwordComplexityRules.passwordReuse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(minimumLength), Arrays.hashCode(numChars), Arrays.hashCode(numNumeric), Arrays.hashCode(numSpecial), requireMixedCase, Arrays.hashCode(passwordReuse));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordComplexityRules {\n");
    sb.append("    minimumLength: ").append(toIndentedString(minimumLength)).append("\n");
    sb.append("    numChars: ").append(toIndentedString(numChars)).append("\n");
    sb.append("    numNumeric: ").append(toIndentedString(numNumeric)).append("\n");
    sb.append("    numSpecial: ").append(toIndentedString(numSpecial)).append("\n");
    sb.append("    requireMixedCase: ").append(toIndentedString(requireMixedCase)).append("\n");
    sb.append("    passwordReuse: ").append(toIndentedString(passwordReuse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MinimumLength");
    openapiFields.add("NumChars");
    openapiFields.add("NumNumeric");
    openapiFields.add("NumSpecial");
    openapiFields.add("RequireMixedCase");
    openapiFields.add("PasswordReuse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PasswordComplexityRules
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordComplexityRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordComplexityRules is not found in the empty JSON string", PasswordComplexityRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordComplexityRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordComplexityRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordComplexityRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordComplexityRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordComplexityRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordComplexityRules.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordComplexityRules>() {
           @Override
           public void write(JsonWriter out, PasswordComplexityRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordComplexityRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordComplexityRules given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordComplexityRules
  * @throws IOException if the JSON string is invalid with respect to PasswordComplexityRules
  */
  public static PasswordComplexityRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordComplexityRules.class);
  }

 /**
  * Convert an instance of PasswordComplexityRules to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

