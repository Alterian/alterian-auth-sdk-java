/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiException;
import com.alterian.auth.model.AddLoginDefaultResponse;
import com.alterian.auth.model.AddLoginRequest;
import com.alterian.auth.model.DisableLoginRequest;
import com.alterian.auth.model.EnableLoginRequest;
import com.alterian.auth.model.GetCurrentLoginDefaultResponse;
import com.alterian.auth.model.GetLoginRequest;
import com.alterian.auth.model.GetLoginsDefaultResponse;
import com.alterian.auth.model.GetLoginsRequest;
import com.alterian.auth.model.LogoutDefaultResponse;
import com.alterian.auth.model.RenameLoginRequest;
import com.alterian.auth.model.UpdateLoginExRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoginsApi
 */
@Disabled
public class LoginsApiTest {

    private final LoginsApi api = new LoginsApi();

    /**
     * Add a login into the system
     *
     * Add a login into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLoginTest() throws ApiException {
        AddLoginRequest addLoginRequest = null;
        AddLoginDefaultResponse response = api.addLogin(addLoginRequest);
        // TODO: test validations
    }

    /**
     * Flag a login as disabled
     *
     * Flag a login as disabled
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableLoginTest() throws ApiException {
        DisableLoginRequest disableLoginRequest = null;
        LogoutDefaultResponse response = api.disableLogin(disableLoginRequest);
        // TODO: test validations
    }

    /**
     * Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     *
     * Flag a login as enabled.  If a login has been expired due to inactivity, this will enable it to be logged into again
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableLoginTest() throws ApiException {
        EnableLoginRequest enableLoginRequest = null;
        LogoutDefaultResponse response = api.enableLogin(enableLoginRequest);
        // TODO: test validations
    }

    /**
     * Returns back info on the current login
     *
     * Returns back info on the current login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentLoginTest() throws ApiException {
        GetCurrentLoginDefaultResponse response = api.getCurrentLogin();
        // TODO: test validations
    }

    /**
     * Return back info on a single login
     *
     * Return back info on a single login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoginTest() throws ApiException {
        GetLoginRequest getLoginRequest = null;
        GetCurrentLoginDefaultResponse response = api.getLogin(getLoginRequest);
        // TODO: test validations
    }

    /**
     * Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     *
     * Query the login list by setting values, optionally including or excluding logins.  If you leave the settings value empty, you can query just by login id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoginsTest() throws ApiException {
        GetLoginsRequest getLoginsRequest = null;
        GetLoginsDefaultResponse response = api.getLogins(getLoginsRequest);
        // TODO: test validations
    }

    /**
     * Renames a login
     *
     * Renames a login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameLoginTest() throws ApiException {
        RenameLoginRequest renameLoginRequest = null;
        LogoutDefaultResponse response = api.renameLogin(renameLoginRequest);
        // TODO: test validations
    }

    /**
     * Update a login
     *
     * Update a login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLoginTest() throws ApiException {
        AddLoginRequest addLoginRequest = null;
        LogoutDefaultResponse response = api.updateLogin(addLoginRequest);
        // TODO: test validations
    }

    /**
     * Updates pieces of a login
     *
     * Updates pieces of a login
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLoginExTest() throws ApiException {
        UpdateLoginExRequest updateLoginExRequest = null;
        LogoutDefaultResponse response = api.updateLoginEx(updateLoginExRequest);
        // TODO: test validations
    }

}
