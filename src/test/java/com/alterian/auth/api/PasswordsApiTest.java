/*
 * Authentication API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alterian.auth.api;

import com.alterian.auth.ApiException;
import com.alterian.auth.model.ChangePasswordRequest;
import com.alterian.auth.model.ExpirePasswordRequest;
import com.alterian.auth.model.GetPasswordComplexityRulesDefaultResponse;
import com.alterian.auth.model.LogoutDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PasswordsApi
 */
@Disabled
public class PasswordsApiTest {

    private final PasswordsApi api = new PasswordsApi();

    /**
     * Changes a login&#39;s password
     *
     * Changes a login&#39;s password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        ChangePasswordRequest changePasswordRequest = null;
        LogoutDefaultResponse response = api.changePassword(changePasswordRequest);
        // TODO: test validations
    }

    /**
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     *
     * Flags a login has having an expired password.  This forces the login to change their password upon their next attempt to log in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expirePasswordTest() throws ApiException {
        ExpirePasswordRequest expirePasswordRequest = null;
        LogoutDefaultResponse response = api.expirePassword(expirePasswordRequest);
        // TODO: test validations
    }

    /**
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     *
     * Returns back the password complexity rules for use in a GUI.  These rules are also applied on the backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPasswordComplexityRulesTest() throws ApiException {
        GetPasswordComplexityRulesDefaultResponse response = api.getPasswordComplexityRules();
        // TODO: test validations
    }

}
